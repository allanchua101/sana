import{_ as a,o as t,c as s,R as i}from"./chunks/framework.KK7BHIzh.js";const b=JSON.parse('{"title":"sana lambda-snapstart-status-distribution","description":"","frontmatter":{},"headers":[],"relativePath":"lambda/distribution/lambda-snapstart-status-distribution.md","filePath":"lambda/distribution/lambda-snapstart-status-distribution.md","lastUpdated":1702961152000}'),n={name:"lambda/distribution/lambda-snapstart-status-distribution.md"},e=i(`<h1 id="sana-lambda-snapstart-status-distribution" tabindex="-1"><code>sana lambda-snapstart-status-distribution</code> <a class="header-anchor" href="#sana-lambda-snapstart-status-distribution" aria-label="Permalink to &quot;\`sana lambda-snapstart-status-distribution\`&quot;">​</a></h1><p>is used to get the Lambda function distribution by SnapStart Optimization Status</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sana</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lambda-snapstart-status-distribution</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lambda Distribution by SnapStart</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Off: 18 functions.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> On: 0 functions.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><h2 id="configuration-purpose" tabindex="-1">Configuration Purpose <a class="header-anchor" href="#configuration-purpose" aria-label="Permalink to &quot;Configuration Purpose&quot;">​</a></h2><p><code>SnapStart.OptimizationStatus</code> property indicates whether SnapStart is activated for the specified function version.</p><h2 id="command-use-cases" tabindex="-1">Command Use-cases <a class="header-anchor" href="#command-use-cases" aria-label="Permalink to &quot;Command Use-cases&quot;">​</a></h2><ul><li>Useful for analyzing account-level or region-level SnapStart adoption rates</li><li>Useful for measuring optimization of latency-sensitive workloads built on top of Java-functions</li></ul><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><ul><li>This feature is extremely helpful for lowering cold-start times for Java-based functions.</li><li>Lambda SnapStart for Java can improve startup performance for latency-sensitive applications by up to 10x at no extra cost, typically with no changes to your function code</li><li>AWS Lambda SnapStart is a feature designed to significantly improve the startup performance of Java functions. It achieves this by creating a snapshot of the initialized execution environment of a Lambda function, which can then be quickly restored for new invocations.</li></ul><h2 id="related-articles" tabindex="-1">Related Articles <a class="header-anchor" href="#related-articles" aria-label="Permalink to &quot;Related Articles&quot;">​</a></h2><ul><li><a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html" target="_blank" rel="noreferrer">Improving Startup Performance with Lambda SnapStart</a></li></ul>`,11),r=[e];function o(l,p,d,h,c,u){return t(),s("div",null,r)}const k=a(n,[["render",o]]);export{b as __pageData,k as default};
