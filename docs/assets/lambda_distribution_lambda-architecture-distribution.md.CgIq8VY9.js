import{_ as a,o as i,c as e,R as t}from"./chunks/framework.KK7BHIzh.js";const b=JSON.parse('{"title":"sana lambda-architecture-distribution","description":"","frontmatter":{},"headers":[],"relativePath":"lambda/distribution/lambda-architecture-distribution.md","filePath":"lambda/distribution/lambda-architecture-distribution.md","lastUpdated":1702738216000}'),s={name:"lambda/distribution/lambda-architecture-distribution.md"},n=t(`<h1 id="sana-lambda-architecture-distribution" tabindex="-1"><code>sana lambda-architecture-distribution</code> <a class="header-anchor" href="#sana-lambda-architecture-distribution" aria-label="Permalink to &quot;\`sana lambda-architecture-distribution\`&quot;">​</a></h1><p>is used to get the Lambda function distribution by underlying architecture.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sana</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lambda-architecture-distribution</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arm64: 20 functions.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x86_64: 220 functions.</span></span></code></pre></div><h2 id="command-use-cases" tabindex="-1">Command Use-cases <a class="header-anchor" href="#command-use-cases" aria-label="Permalink to &quot;Command Use-cases&quot;">​</a></h2><ul><li>Useful for optimizing cost of systems. (ARM chips are cheaper than x86_64)</li><li>Useful for measuring migration progress.</li></ul><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><ul><li>ARM64 functions are generally more energy-efficient than their x86_64 counterparts, leading to lower energy costs.</li><li>ARM64 is based on a RISC (Reduced Instruction Set Computing) architecture, which is typically simpler and more power-efficient than the CISC (Complex Instruction Set Computing) architecture used in x86_64.</li><li>Regardless of the lambda runtime you have, you&#39;ll gain performance while saving on cost.</li><li>If you are building latency constrained or memory-heavy workloads, stick with x86_64.</li></ul><h2 id="related-benchmarks-and-materials" tabindex="-1">Related Benchmarks and Materials <a class="header-anchor" href="#related-benchmarks-and-materials" aria-label="Permalink to &quot;Related Benchmarks and Materials&quot;">​</a></h2><ul><li><a href="https://aws.amazon.com/blogs/apn/comparing-aws-lambda-arm-vs-x86-performance-cost-and-analysis-2/" target="_blank" rel="noreferrer">Comparing AWS Lambda Arm vs. x86 Performance, Cost, and Analysis</a></li></ul>`,9),r=[n];function l(o,c,d,h,u,m){return i(),e("div",null,r)}const k=a(s,[["render",l]]);export{b as __pageData,k as default};
